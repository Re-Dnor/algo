[
  {
    "name": "Слияние двух отсортированных массивов",
    "description": "Сортировка массивов — базовая алгоритмическая задача, которую нередко спрашивают на собеседованиях.",
    "task": "Дано 2 отсортированных массива, необходимо соединить их в один и отсортировать. Важное правило: нельзя использовать встроенный метод Array.prototype.sort().",
    "examples": {
      "Пример 1:": [
        "Входные данные: nums1: [1, 2, 3, 4, 5], nums: [6, 7, 8, 9, 10] ",
        "Вывод: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      ]
    },
    "defaultSolution": "const mergeArray = (nums1, nums2) => {\n    \n}\n\nconsole.log(mergeArray([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]))",
    "answer": "const mergeArray = (nums1, nums2) => {\n  const sorted = [];\n\n  while (nums1.length && nums2.length) {\n    if (nums1[0] <= nums2[0]) sorted.push(nums1.shift());\n    if (nums1[0] >= nums2[0]) sorted.push(nums2.shift());\n  }\n\n  return [...sorted, ...nums1, ...nums2];\n};"
  },
  {
    "name": "Сортировка групп",
    "description": "Очень распространённая задача - это перебор всех элементов массива и обработка каждого элемента некоторой операцией.",
    "task": "Дан массив слов анаграмм, необходимо все слова объеденить в отдельные группы массивов",
    "examples": {
      "Пример 1:": [
        "Входные данные: arr: ['stop', 'pots', 'otsp', 'appa', 'mama', 'amma']",
        "Вывод: [ [ 'stop', 'pots', 'otsp' ], [ 'appa' ], [ 'mama', 'amma' ] ]"
      ]
    },
    "defaultSolution": "const sortGroups = (arr) => {\n\n}\n\nconsole.log(sortGroups(['stop', 'pots', 'otsp', 'appa', 'mama', 'amma']))",
    "answer": "const sortGroups = (arr) => {\n  const pair = {};\n\n  for (let word of arr) {\n    const key = word.split(\"\").sort().join(\"\");\n    pair[key] = pair[key] ? [...pair[key], word] : [word];\n  }\n\n  return Object.values(pair);\n};"
  },
  {
    "name": "Cвойства объекта",
    "task": "Вернуть значение объекта содержащее переданный путь",
    "examples": {
      "Пример 1:": [
        "Входные данные: obj: {a: { b: 123, c: {d: 321} }}, path: a.b",
        "Вывод: 123"
      ],
      "Пример 2:": [
        "Входные данные: obj: {a: { b: 123, c: {d: 321} }}, path: a.c.d",
        "Вывод: 321"
      ]
    },
    "defaultSolution": "const getProperty = (obj, path) => {\n\n}\n\nconsole.log(getProperty({a: { b: 123, c: {d: 321} }}, \"a.b\"))",
    "answer": "const getProperty = (obj, path) => {\n  const keys = path.split('');\n  return keys.reduce((acc, key) => acc[key] , obj);\n};"
  },
  {
    "name": "Временная мертвая зона (TDZ)",
    "task": "Что будет выведено в консоль?",
    "description": "Переменные объявленные через let и const также имеют всплытие, но тогда почему к ним нельзя получить доступ до их объявления? Ответ на этот вопрос лежит в рамках концепции временной мертвой зоны (TDZ). Переменные, объявленные с помощью let и const, поднимаются, но находятся в TDZ. Это предотвращает доступ к ним до того, как их объявление будет фактически выполнено во время пошагового выполнения кода. Временная мертвая зона — это период времени, в течение которого объявления let и const недоступны. Временная мертвая зона начинается, когда выполнение кода входит в блок, содержащий объявление let или const, и продолжается до тех пор, пока объявление не будет выполнено.",
    "defaultSolution": "var number = 2;\n\nfunction getNumber() {\n  console.log(number);\n}\n\nfunction showNumber() {\n  console.log(number);\n  let number = 5;\n  getNumber();\n}\n\nshowNumber();",
    "answer": "// ReferenceError: Cannot access 'number' before initialization\n// Как можно пофиксить это?"
  },
  {
    "name": "Event loop",
    "task": "Что будет выведено в консоль?",
    "description": "Поток выполнения в браузере, равно как и в Node.js, основан на событийном цикле. Понимание работы событийного цикла важно для оптимизаций, иногда для правильной архитектуры.",
    "defaultSolution": "console.log(\"start\");\n\nconst promise1 = Promise.resolve().then(() => {\n  console.log(\"promise1\");\n  const timer2 = setTimeout(() => {\n    console.log(\"timer2\");\n  }, 0);\n});\n\nconst timer1 = setTimeout(() => {\n  console.log(\"timer1\");\n  const promise2 = Promise.resolve().then(() => {\n    console.log(\"promise2\");\n  });\n}, 0);\n\nconsole.log(\"end\");",
    "answer": "start / end / promise1 / timer1 / promise2 / timer2"
  },
  {
    "name": "Композиция",
    "task": "Реализовать композицию",
    "description": "Композиция - создание сложной функциональности за счет объединения более простых функций. В некотором смысле, композиция - это вложение функций, каждая из которых передает свой результат в качестве входных данных для другой функции. Но вместо того, чтобы создавать неразборчивое количество вложений, мы создадим функцию более высокого порядка - compose(), которая принимает все функции, которые мы хотим объединить, и возвращает нам новую функцию для использования.",
    "examples": {
      "Пример:": [
        "Входные данные: const sum = (nums) => nums.reduce((acc, val) => acc + val);",
        "const getNums = (num) => new Array(num).fill(0).map((_, i) => i + 1);",
        "const getNumber = compose(sum, getNums);",
        "console.log(getNumber(5));",
        "Вывод: 15"
      ]
    },
    "defaultSolution": "const sum = (nums) => nums.reduce((acc, val) => acc + val);\n\nconst getNums = (number) => {\n  return new Array(number).fill(0).map((_, i) => i + 1);\n};\n\nconst compose = (...fns) => {\n  // ...\n};\n\nconst getNumber = compose(sum, getNums);\n\nconsole.log(getNumber(5));",
    "answer": "const sum = (nums) => nums.reduce((acc, val) => acc + val);\n\nconst getNums = (number) => {\n  return new Array(number).fill(0).map((_, i) => i + 1);\n};\n\nconst compose = (...fns) => {\n  return (num) => fns.reduceRight((acc, val) => val(acc), num);\n};\n\nconst getNumber = compose(sum, getNums);\n\nconsole.log(getNumber(5));"
  }
]
